//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/RestResult.java
//

#include "J2ObjC_source.h"
#include "RestResult.h"
#include "java/lang/Throwable.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface AppBaseRestResult () {
 @public
  jboolean error_;
  NSString *message_;
  id result_;
  id<JavaUtilList> results_;
  jlong currentUnixTime_;
  jint totalCount_;
  id<JavaUtilMap> errors_;
}

@end

J2OBJC_FIELD_SETTER(AppBaseRestResult, message_, NSString *)
J2OBJC_FIELD_SETTER(AppBaseRestResult, result_, id)
J2OBJC_FIELD_SETTER(AppBaseRestResult, results_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(AppBaseRestResult, errors_, id<JavaUtilMap>)

@implementation AppBaseRestResult

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AppBaseRestResult_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)error
                   withNSString:(NSString *)message {
  AppBaseRestResult_initWithBoolean_withNSString_(self, error, message);
  return self;
}

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)ex {
  AppBaseRestResult_initWithJavaLangThrowable_(self, ex);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message {
  AppBaseRestResult_initWithNSString_(self, message);
  return self;
}

- (instancetype)initWithId:(id)result {
  AppBaseRestResult_initWithId_(self, result);
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)results {
  AppBaseRestResult_initWithJavaUtilList_(self, results);
  return self;
}

- (jboolean)isError {
  return error_;
}

- (jboolean)isSuccess {
  return !error_;
}

- (void)setErrorWithBoolean:(jboolean)error {
  self->error_ = error;
}

- (NSString *)getMessage {
  NSString *val = message_;
  if (self->errors_ != nil && ![self->errors_ isEmpty]) {
    (void) JreStrAppendStrong(&val, "$", @"\n\n");
    for (NSString * __strong key in nil_chk([self->errors_ keySet])) {
      (void) JreStrAppendStrong(&val, "$$$C", key, @": ", [((id<JavaUtilMap>) nil_chk(self->errors_)) getWithId:key], 0x000a);
    }
  }
  return val;
}

- (void)setMessageWithNSString:(NSString *)message {
  self->message_ = message;
}

- (id)getResult {
  return result_;
}

- (void)setResultWithId:(id)result {
  self->result_ = result;
}

- (id<JavaUtilList>)getResults {
  return results_;
}

- (void)setResultsWithJavaUtilList:(id<JavaUtilList>)results {
  self->results_ = results;
}

- (jlong)getCurrentUnixTime {
  return currentUnixTime_;
}

- (void)setCurrentUnixTimeWithLong:(jlong)currentUnixTime {
  self->currentUnixTime_ = currentUnixTime;
}

- (jint)getTotalCount {
  return totalCount_;
}

- (void)setTotalCountWithInt:(jint)totalCount {
  self->totalCount_ = totalCount;
}

- (id<JavaUtilMap>)getErrors {
  return errors_;
}

- (void)setErrorsWithJavaUtilMap:(id<JavaUtilMap>)errors {
  self->errors_ = errors;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 13, 5, -1, 6, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 18, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, 21, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:withNSString:);
  methods[2].selector = @selector(initWithJavaLangThrowable:);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(initWithId:);
  methods[5].selector = @selector(initWithJavaUtilList:);
  methods[6].selector = @selector(isError);
  methods[7].selector = @selector(isSuccess);
  methods[8].selector = @selector(setErrorWithBoolean:);
  methods[9].selector = @selector(getMessage);
  methods[10].selector = @selector(setMessageWithNSString:);
  methods[11].selector = @selector(getResult);
  methods[12].selector = @selector(setResultWithId:);
  methods[13].selector = @selector(getResults);
  methods[14].selector = @selector(setResultsWithJavaUtilList:);
  methods[15].selector = @selector(getCurrentUnixTime);
  methods[16].selector = @selector(setCurrentUnixTimeWithLong:);
  methods[17].selector = @selector(getTotalCount);
  methods[18].selector = @selector(setTotalCountWithInt:);
  methods[19].selector = @selector(getErrors);
  methods[20].selector = @selector(setErrorsWithJavaUtilMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "error_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "message_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "result_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 22, -1 },
    { "results_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
    { "currentUnixTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errors_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
  };
  static const void *ptrTable[] = { "ZLNSString;", "LJavaLangThrowable;", "LNSString;", "LNSObject;", "(TT;)V", "LJavaUtilList;", "(Ljava/util/List<TT;>;)V", "setError", "Z", "setMessage", "()TT;", "setResult", "()Ljava/util/List<TT;>;", "setResults", "setCurrentUnixTime", "J", "setTotalCount", "I", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "setErrors", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "TT;", "Ljava/util/List<TT;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _AppBaseRestResult = { "RestResult", "br.com.mobilemind.j2objc.rest", ptrTable, methods, fields, 7, 0x1, 21, 7, -1, -1, -1, 25, -1 };
  return &_AppBaseRestResult;
}

@end

void AppBaseRestResult_init(AppBaseRestResult *self) {
  NSObject_init(self);
  self->errors_ = new_JavaUtilHashMap_init();
}

AppBaseRestResult *new_AppBaseRestResult_init() {
  J2OBJC_NEW_IMPL(AppBaseRestResult, init)
}

AppBaseRestResult *create_AppBaseRestResult_init() {
  J2OBJC_CREATE_IMPL(AppBaseRestResult, init)
}

void AppBaseRestResult_initWithBoolean_withNSString_(AppBaseRestResult *self, jboolean error, NSString *message) {
  NSObject_init(self);
  self->errors_ = new_JavaUtilHashMap_init();
  self->error_ = error;
  self->message_ = message;
}

AppBaseRestResult *new_AppBaseRestResult_initWithBoolean_withNSString_(jboolean error, NSString *message) {
  J2OBJC_NEW_IMPL(AppBaseRestResult, initWithBoolean_withNSString_, error, message)
}

AppBaseRestResult *create_AppBaseRestResult_initWithBoolean_withNSString_(jboolean error, NSString *message) {
  J2OBJC_CREATE_IMPL(AppBaseRestResult, initWithBoolean_withNSString_, error, message)
}

void AppBaseRestResult_initWithJavaLangThrowable_(AppBaseRestResult *self, JavaLangThrowable *ex) {
  NSObject_init(self);
  self->errors_ = new_JavaUtilHashMap_init();
  self->error_ = true;
  self->message_ = [((JavaLangThrowable *) nil_chk(ex)) getMessage];
}

AppBaseRestResult *new_AppBaseRestResult_initWithJavaLangThrowable_(JavaLangThrowable *ex) {
  J2OBJC_NEW_IMPL(AppBaseRestResult, initWithJavaLangThrowable_, ex)
}

AppBaseRestResult *create_AppBaseRestResult_initWithJavaLangThrowable_(JavaLangThrowable *ex) {
  J2OBJC_CREATE_IMPL(AppBaseRestResult, initWithJavaLangThrowable_, ex)
}

void AppBaseRestResult_initWithNSString_(AppBaseRestResult *self, NSString *message) {
  NSObject_init(self);
  self->errors_ = new_JavaUtilHashMap_init();
  self->message_ = message;
}

AppBaseRestResult *new_AppBaseRestResult_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(AppBaseRestResult, initWithNSString_, message)
}

AppBaseRestResult *create_AppBaseRestResult_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(AppBaseRestResult, initWithNSString_, message)
}

void AppBaseRestResult_initWithId_(AppBaseRestResult *self, id result) {
  NSObject_init(self);
  self->errors_ = new_JavaUtilHashMap_init();
  self->result_ = result;
}

AppBaseRestResult *new_AppBaseRestResult_initWithId_(id result) {
  J2OBJC_NEW_IMPL(AppBaseRestResult, initWithId_, result)
}

AppBaseRestResult *create_AppBaseRestResult_initWithId_(id result) {
  J2OBJC_CREATE_IMPL(AppBaseRestResult, initWithId_, result)
}

void AppBaseRestResult_initWithJavaUtilList_(AppBaseRestResult *self, id<JavaUtilList> results) {
  NSObject_init(self);
  self->errors_ = new_JavaUtilHashMap_init();
  self->results_ = results;
}

AppBaseRestResult *new_AppBaseRestResult_initWithJavaUtilList_(id<JavaUtilList> results) {
  J2OBJC_NEW_IMPL(AppBaseRestResult, initWithJavaUtilList_, results)
}

AppBaseRestResult *create_AppBaseRestResult_initWithJavaUtilList_(id<JavaUtilList> results) {
  J2OBJC_CREATE_IMPL(AppBaseRestResult, initWithJavaUtilList_, results)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AppBaseRestResult)

J2OBJC_NAME_MAPPING(AppBaseRestResult, "br.com.mobilemind.j2objc.rest", "AppBase")
